* Build instructions for the data-diversity branch
  
  1. Install necessary packages
     #+BEGIN_SRC shell-script
       sudo apt-get build-dep libllvm3.6
       sudo apt-get install libpcre3-dev
     #+END_SRC
     
  2. Patch printf.h from glibc \\
     There is a bug in glibc printf.h:
     https://sourceware.org/bugzilla/show_bug.cgi?id=18907. Apply the following
     patch to /usr/include/printf.h to fix the bug.
     #+BEGIN_SRC diff
       diff --git a/stdio-common/printf.h b/stdio-common/printf.h
       index 6441259..5ad1bab 100644
       --- a/stdio-common/printf.h
       +++ b/stdio-common/printf.h
       @@ -111,13 +111,13 @@ extern int register_printf_function (int __spec, printf_function __func,
           it returns a positive value representing the bit set in the USER
           field in 'struct printf_info'.  */
        
       -extern int register_printf_modifier (const wchar_t *__str) __wur __THROW;
       +extern int register_printf_modifier (const wchar_t *__str) __THROW __wur;
        
        
        /* Register variable argument handler for user type.  The return value
           is to be used in ARGINFO functions to signal the use of the
           type.  */
       -extern int register_printf_type (printf_va_arg_function __fct) __wur __THROW;
       +extern int register_printf_type (printf_va_arg_function __fct) __THROW __wur;
        
        
        /* Parse FMT, and fill in N elements of ARGTYPES with the
     #+END_SRC

  4. Symlink /usr/bin/ld to ld.gold \\
     We need the gold linker for link time optimization plugin support
     #+BEGIN_SRC shell-script
       sudo ln -s -f /usr/bin/ld.gold /usr/bin/ld
       ld -version                     # should be GNU Gold
     #+END_SRC
     
  5. Clone the necessary repositories
     - Set up the following directory hierarchy
       #+BEGIN_EXAMPLE
         multicompiler-priv/
           src/
           build/
       #+END_EXAMPLE
       
       #+BEGIN_SRC shell-script
         mkdir multicompiler-priv
         mkdir multicompiler-priv/src
         mkdir multicompiler-priv/build
       #+END_SRC
       
     - Checkout the multicompiler and poolalloc repositories
       #+BEGIN_SRC shell-script
         cd multicompiler-priv/
         git clone https://github.com/securesystemslab/multicompiler-priv src
         cd src
         git checkout data-diversity

         cd projects
         git clone https://github.com/securesystemslab/poolalloc
         cd poolalloc
         git checkout data-diversity
       #+END_SRC
       
     - Get official clang 3.7
       #+BEGIN_SRC shell-script
         cd ../../tools
         git clone http://llvm.org/git/clang
         cd clang
         git checkout release_37
       #+END_SRC

  6. Setup cmake build environment and build the compiler \\
     #+BEGIN_SRC shell-script
       cd ../../../build/
       cmake -DLLVM_BINUTILS_INCDIR=/usr/include/ ../src/
       make
     #+END_SRC
* How to build Apache with LTO and data randomization
  
  1. Set environment variables
     - Set environment variable LLVM_BUILD_DIR to the llvm object root directory on your system.
       #+BEGIN_SRC shell-script
         export LLVM_BUILD_DIR=/home/USERNAME/multicompiler-priv/build
       #+END_SRC
       
     - Set environment variable APACHE_INSTALL_DIR to the target directory to install apache to.
       #+BEGIN_SRC shell-script
         export APACHE_INSTALL_DIR=/home/USERNAME/apache/build

         # Make sure that this directory exists
         mkdir -p $APACHE_INSTALL_DIR
       #+END_SRC
       
     - Set environment variables to select the llvm toolchain for building
       #+BEGIN_SRC shell-script
         export CC="$LLVM_BUILD_DIR/bin/clang"
         export CXX="$LLVM_BUILD_DIR/bin/clang++"
         export AR="$LLVM_BUILD_DIR/bin/llvm-ar"
         export NM="$LLVM_BUILD_DIR/bin/llvm-nm"
         export RANLIB="$LLVM_BUILD_DIR/bin/llvm-ranlib"
       #+END_SRC
       
  2. Configure and build apr:
     #+BEGIN_SRC shell-script
       cd apr-1.5.2
       ./configure CFLAGS="-g -O2 -flto" CXXFLAGS="-g -O2 -flto" --prefix=$APACHE_INSTALL_DIR --enable-static --enable-shared=no
       make
       make install
     #+END_SRC
     
  3. Configure and build apr-util:
     #+BEGIN_SRC shell-script
       cd ../apr-util-1.5.4/
       ./configure CFLAGS="-g -O2 -flto" CXXFLAGS="-g -O2 -flto" --with-expat=builtin --prefix=$APACHE_INSTALL_DIR --with-apr=$APACHE_INSTALL_DIR --enable-static --enable-shared=no
       make
       make install
     #+END_SRC
     
  4. Configure and build httpd:
     #+BEGIN_SRC shell-script
       cd ../httpd-2.4.17
       ./configure CFLAGS="-g -O2 -flto" CXXFLAGS="-g -O2 -flto" LDFLAGS="-Wl,--plugin-opt=data-rando -L$LLVM_BUILD_DIR -lDataRando_rt -lstdc++" --with-mpm=prefork --prefix=$APACHE_INSTALL_DIR --with-apr=$APACHE_INSTALL_DIR --with-apr-util=$APACHE_INSTALL_DIR --enable-mods-static="access_compat alias auth_basic authn_core authn_file authz_core authz_groupfile authz_host authz_user autoindex dir env filter headers log_config mime reqtimeout setenvif status unixd version cgi dumpio info log_debug logio echo"
       make
       make install
     #+END_SRC
     
